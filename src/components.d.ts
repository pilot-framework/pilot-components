/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface PtAlert {
      'type': 'submit' | 'alert';
      'variant': 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
    }
  }

  interface HTMLPtAlertElement extends StencilComponents.PtAlert, HTMLStencilElement {}

  var HTMLPtAlertElement: {
    prototype: HTMLPtAlertElement;
    new (): HTMLPtAlertElement;
  };
  interface HTMLElementTagNameMap {
    'pt-alert': HTMLPtAlertElement;
  }
  interface ElementTagNameMap {
    'pt-alert': HTMLPtAlertElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pt-alert': JSXElements.PtAlertAttributes;
    }
  }
  namespace JSXElements {
    export interface PtAlertAttributes extends HTMLAttributes {
      'type'?: 'submit' | 'alert';
      'variant'?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface PtButton {
      'disabled': boolean;
      'size': 'sm' | 'lg';
      'type': 'submit' | 'button';
      'variant': 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
    }
  }

  interface HTMLPtButtonElement extends StencilComponents.PtButton, HTMLStencilElement {}

  var HTMLPtButtonElement: {
    prototype: HTMLPtButtonElement;
    new (): HTMLPtButtonElement;
  };
  interface HTMLElementTagNameMap {
    'pt-button': HTMLPtButtonElement;
  }
  interface ElementTagNameMap {
    'pt-button': HTMLPtButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pt-button': JSXElements.PtButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface PtButtonAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'size'?: 'sm' | 'lg';
      'type'?: 'submit' | 'button';
      'variant'?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface PtCardContent {

    }
  }

  interface HTMLPtCardContentElement extends StencilComponents.PtCardContent, HTMLStencilElement {}

  var HTMLPtCardContentElement: {
    prototype: HTMLPtCardContentElement;
    new (): HTMLPtCardContentElement;
  };
  interface HTMLElementTagNameMap {
    'pt-card-content': HTMLPtCardContentElement;
  }
  interface ElementTagNameMap {
    'pt-card-content': HTMLPtCardContentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pt-card-content': JSXElements.PtCardContentAttributes;
    }
  }
  namespace JSXElements {
    export interface PtCardContentAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PtCardCover {
      'src': any;
    }
  }

  interface HTMLPtCardCoverElement extends StencilComponents.PtCardCover, HTMLStencilElement {}

  var HTMLPtCardCoverElement: {
    prototype: HTMLPtCardCoverElement;
    new (): HTMLPtCardCoverElement;
  };
  interface HTMLElementTagNameMap {
    'pt-card-cover': HTMLPtCardCoverElement;
  }
  interface ElementTagNameMap {
    'pt-card-cover': HTMLPtCardCoverElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pt-card-cover': JSXElements.PtCardCoverAttributes;
    }
  }
  namespace JSXElements {
    export interface PtCardCoverAttributes extends HTMLAttributes {
      'src'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface PtCard {

    }
  }

  interface HTMLPtCardElement extends StencilComponents.PtCard, HTMLStencilElement {}

  var HTMLPtCardElement: {
    prototype: HTMLPtCardElement;
    new (): HTMLPtCardElement;
  };
  interface HTMLElementTagNameMap {
    'pt-card': HTMLPtCardElement;
  }
  interface ElementTagNameMap {
    'pt-card': HTMLPtCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pt-card': JSXElements.PtCardAttributes;
    }
  }
  namespace JSXElements {
    export interface PtCardAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;